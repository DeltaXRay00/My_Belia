<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="csrf-token" content={get_csrf_token()}>
  <title>Admin Permohonan Kursus - MyBelia</title>
  <link href="https://fonts.googleapis.com/css?family=Inter&display=swap" rel="stylesheet">
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
  <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
  <style>
    /* WYSIWYG Editor Styles */
    .ql-editor {
      min-height: 150px;
      font-family: 'Inter', sans-serif;
      font-size: 14px;
      line-height: 1.6;
    }
    
    .ql-toolbar {
      border-top: 1px solid #ccc;
      border-left: 1px solid #ccc;
      border-right: 1px solid #ccc;
      border-radius: 8px 8px 0 0;
      background-color: #f8f9fa;
    }
    
    .ql-container {
      border-bottom: 1px solid #ccc;
      border-left: 1px solid #ccc;
      border-right: 1px solid #ccc;
      border-radius: 0 0 8px 8px;
      background-color: white;
    }
    
    .ql-editor.ql-blank::before {
      color: #6b7280;
      font-style: italic;
    }
    
    /* Form field spacing */
    .form-group {
      margin-bottom: 20px;
    }
    
    /* WYSIWYG container spacing */
    #quill-editor-container-course {
      margin-bottom: 10px;
    }

    /* Applications Table Styles */
    .applications-section {
      margin-top: 2rem;
    }

    .filter-tabs {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1.5rem;
      flex-wrap: wrap;
    }

    .filter-tab {
      padding: 0.5rem 1rem;
      border: 1px solid #e2e8f0;
      background: white;
      border-radius: 0.5rem;
      cursor: pointer;
      transition: all 0.2s;
      font-size: 0.875rem;
    }

    .filter-tab:hover {
      background: #f8fafc;
    }

    .filter-tab.active {
      background: #3b82f6;
      color: white;
      border-color: #3b82f6;
    }

    .applications-table {
      background: white;
      border-radius: 0.75rem;
      overflow: hidden;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .applications-table-content {
      width: 100%;
      border-collapse: collapse;
    }

    .applications-table-content th,
    .applications-table-content td {
      padding: 1rem;
      text-align: left;
      border-bottom: 1px solid #e2e8f0;
    }

    .applications-table-content th {
      background: #f8fafc;
      font-weight: 600;
      color: #374151;
    }

    .applications-table-content tr:hover {
      background: #f9fafb;
    }

    .status-badge {
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.75rem;
      font-weight: 600;
    }

    .status-badge.menunggu {
      background: #fef3c7;
      color: #92400e;
    }

    .status-badge.diluluskan {
      background: #dcfce7;
      color: #166534;
    }

    .status-badge.ditolak {
      background: #fee2e2;
      color: #991b1b;
    }

    .status-badge.tidak_lengkap {
      background: #f3e8ff;
      color: #7c3aed;
    }

    .action-buttons {
      display: flex;
      gap: 0.25rem;
    }

    .action-btn {
      padding: 0.25rem 0.5rem;
      border: none;
      border-radius: 0.25rem;
      cursor: pointer;
      font-size: 0.875rem;
      transition: all 0.2s;
    }

    .action-btn.view-btn {
      background: #3b82f6;
      color: white;
    }

    .action-btn.approve-btn {
      background: #10b981;
      color: white;
    }

    .action-btn.reject-btn {
      background: #ef4444;
      color: white;
    }

    .action-btn.incomplete-btn {
      background: #f59e0b;
      color: white;
    }

    .action-btn:hover {
      opacity: 0.8;
    }

    .empty-state {
      text-align: center;
      padding: 3rem 1rem;
      color: #6b7280;
    }

    .empty-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
    }

    .empty-state h3 {
      margin-bottom: 0.5rem;
      color: #374151;
    }

    .review-form {
      padding: 1rem;
    }

    .form-actions {
      display: flex;
      gap: 1rem;
      justify-content: flex-end;
      margin-top: 1.5rem;
    }

    .btn {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 0.5rem;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.2s;
    }

    .btn-primary {
      background: #3b82f6;
      color: white;
    }

    .btn-secondary {
      background: #6b7280;
      color: white;
    }

    .btn:hover {
      opacity: 0.8;
    }
  </style>
</head>
<body>
<.admin_layout current_page="permohonan_kursus" page_title="Permohonan / Kursus">

    <!-- Course Management Content -->
    <div class="program-management-content">
      <!-- Action Button -->
      <div class="action-section">
        <button class="new-program-btn" id="new-course-btn">Kursus Baru</button>
      </div>

      <!-- Modal Form for New Course -->
      <div class="modal-overlay" id="course-modal">
        <div class="modal-content">
          <div class="modal-header">
            <button class="modal-close" id="modal-close">&times;</button>
          </div>
          
          <form class="program-form">
            <!-- Image Upload Section -->
            <div class="image-upload-section">
              <label>Gambar Kursus *</label>
              <div class="image-upload-area" id="image-upload-area">
                <img id="image-preview" src="" alt="Preview" style="display: none; max-width: 100%; max-height: 200px; border-radius: 8px;">
                <div id="upload-placeholder">
                  <div class="upload-icon">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M21 15V19C21 19.5304 20.7893 20.0391 20.4142 20.4142C20.0391 20.7893 19.5304 21 19 21H5C4.46957 21 3.96086 20.7893 3.58579 20.4142C3.21071 20.0391 3 19.5304 3 19V15" stroke="#666" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                      <path d="M17 8L12 3L7 8" stroke="#666" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                      <path d="M12 3V15" stroke="#666" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                  </div>
                  <div class="plus-icon">+</div>
                </div>
                <input type="file" id="course-image" name="course_image" accept="image/*" style="display: none;">
              </div>
              <div class="field-error" id="image-error" style="display: none; color: #ff6b6b; font-size: 12px; margin-top: 4px;"></div>
            </div>

            <!-- Form Fields -->
            <div class="form-fields">
              <div class="form-group">
                <label for="course-name">Nama Kursus *</label>
                <input type="text" id="course-name" name="course_name" class="form-input" placeholder="Masukkan nama kursus" required>
                <div class="field-error" id="name-error" style="display: none; color: #ff6b6b; font-size: 12px; margin-top: 4px;"></div>
              </div>

              <div class="form-group">
                <label for="course-description">Diskripsi *</label>
                <textarea id="course-description" name="course_description" class="form-textarea wysiwyg-textarea" placeholder="Masukkan diskripsi kursus dengan format yang diingini..." required rows="8"></textarea>
                <div class="field-error" id="description-error" style="display: none; color: #ff6b6b; font-size: 12px; margin-top: 4px;"></div>
                <small class="form-help">
                  <strong>Editor WYSIWYG:</strong> Gunakan alat format di atas untuk memformat teks. 
                  Format yang disokong: <strong>Bold</strong>, <em>Italic</em>, <u>Underline</u>, 
                  Senarai, Penjajaran, Warna, dan Pautan.
                </small>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label for="course-start-date">Tarikh Mula *</label>
                  <input type="date" id="course-start-date" name="course_start_date" class="form-input" required>
                  <div class="field-error" id="start-date-error" style="display: none; color: #ff6b6b; font-size: 12px; margin-top: 4px;"></div>
                </div>
                <div class="form-group">
                  <label for="course-end-date">Tarikh Tamat *</label>
                  <input type="date" id="course-end-date" name="course_end_date" class="form-input" required>
                  <div class="field-error" id="end-date-error" style="display: none; color: #ff6b6b; font-size: 12px; margin-top: 4px;"></div>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label for="course-start-time">Waktu Mula *</label>
                  <input type="time" id="course-start-time" name="course_start_time" class="form-input" required>
                  <div class="field-error" id="start-time-error" style="display: none; color: #ff6b6b; font-size: 12px; margin-top: 4px;"></div>
                </div>
                <div class="form-group">
                  <label for="course-end-time">Waktu Tamat *</label>
                  <input type="time" id="course-end-time" name="course_end_time" class="form-input" required>
                  <div class="field-error" id="end-time-error" style="display: none; color: #ff6b6b; font-size: 12px; margin-top: 4px;"></div>
                </div>
              </div>
            </div>

            <!-- Submit Button -->
            <div class="form-actions">
              <button type="submit" class="create-btn">Cipta</button>
            </div>
          </form>
        </div>
      </div>

      <!-- Filter Section -->
      <div class="filter-section">
        <div class="filter-header">
          <h3 class="filter-title">Tapisan</h3>
        </div>
        <div class="filter-controls">
          <form class="search-box" action="/admin/search-courses" method="GET">
            <input type="text" name="q" placeholder="Carian kursus..." class="search-input" />
            <button type="submit" class="search-button" aria-label="Cari">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.35-4.35"></path>
              </svg>
            </button>
          </form>
          <div class="filter-dropdowns">
            <div class="filter-item">
              <label class="filter-label">Status</label>
              <div class="filter-dropdown"></div>
            </div>
            <div class="filter-item">
              <label class="filter-label">Daerah</label>
              <div class="filter-dropdown"></div>
            </div>
            <div class="filter-item">
              <label class="filter-label">Tarikh</label>
              <div class="filter-dropdown"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Course Grid -->
      <div class="program-grid">
        <%= for course <- @courses do %>
          <div class="program-card" data-course-id={course.id}>
            <div class="program-card-content" onclick={"window.location.href='/admin/course/#{course.id}/pemohon'"}>
              <div class="program-image">
                <img src={course.image_data} alt={course.name} style="width: 100%; height: 120px; object-fit: cover; border-radius: 8px 8px 0 0;">
              </div>
              <div class="program-info">
                <h3 class="program-title"><%= course.name %></h3>
                <p class="program-description"><%= String.slice(course.description, 0, 100) %><%= if String.length(course.description) > 100, do: "...", else: "" %></p>
                <div class="program-dates">
                  <span><%= Date.to_string(course.start_date) %> - <%= Date.to_string(course.end_date) %></span>
                </div>
                <div class="program-applications-count">
                  <small>Pemohon: <%= @course_applications_counts[course.id] || 0 %></small>
                </div>
              </div>
            </div>
            <!-- Action Icons -->
            <div class="program-actions">
              <button class="action-icon edit-btn" title="Edit Course" data-course-id={course.id} onclick="event.stopPropagation(); console.log('Edit button clicked for course:', this.dataset.courseId); editCourse(this.dataset.courseId)">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                  <path d="m18.5 2.5 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                </svg>
              </button>
              <button class="action-icon status-btn" title="Status Course" data-course-id={course.id} onclick="event.stopPropagation(); console.log('Status button clicked for course:', this.dataset.courseId); changeCourseStatus(this.dataset.courseId)">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="3"></circle>
                  <path d="M12 1v6m0 6v6"></path>
                  <path d="M19.78 4.22l-4.24 4.24m-8.48 8.48l-4.24 4.24"></path>
                </svg>
              </button>
              <button class="action-icon delete-btn" title="Delete Course" data-course-id={course.id} onclick="event.stopPropagation(); console.log('Delete button clicked for course:', this.dataset.courseId); deleteCourse(this.dataset.courseId)">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="3,6 5,6 21,6"></polyline>
                  <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"></path>
                </svg>
              </button>
            </div>
          </div>
        <% end %>

        <%= for _i <- 1..(9 - length(@courses)) do %>
          <div class="program-card placeholder"></div>
        <% end %>
      </div>

      <!-- Edit Course Modal -->
      <div class="modal-overlay" id="edit-course-modal">
        <div class="modal-content">
          <div class="modal-header">
            <h3>Edit Kursus</h3>
            <button class="modal-close" id="edit-course-modal-close">&times;</button>
          </div>
          
          <form class="program-form" id="edit-course-form">
            <input type="hidden" id="edit-course-id" name="course_id">
            
            <!-- Image Upload Section -->
            <div class="image-upload-section">
              <div class="image-upload-area" id="edit-course-image-upload-area">
                <div class="upload-icon" id="edit-course-upload-icon">
                  <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                    <circle cx="8.5" cy="8.5" r="1.5"></circle>
                    <polyline points="21,15 16,10 5,21"></polyline>
                  </svg>
                  <div class="plus-icon">+</div>
                </div>
                <img id="edit-course-preview-image" class="preview-image" style="display: none; max-width: 100%; max-height: 100%; object-fit: cover; border-radius: 8px;">
                <input type="file" id="edit-course-image-input" name="course_image" accept="image/*" style="display: none;">
              </div>
            </div>

            <!-- Form Fields -->
            <div class="form-fields">
              <div class="form-group">
                <label for="edit-course-name">Nama Kursus *</label>
                <input type="text" id="edit-course-name" name="course_name" class="form-input" placeholder="Masukkan nama kursus" required>
              </div>

              <div class="form-group">
                <label for="edit-course-description">Diskripsi *</label>
                <textarea id="edit-course-description" name="course_description" class="form-textarea wysiwyg-textarea" placeholder="Masukkan diskripsi kursus dengan format yang diingini..." required rows="8"></textarea>
                <small class="form-help">
                  <strong>Editor WYSIWYG:</strong> Gunakan alat format di atas untuk memformat teks. 
                  Format yang disokong: <strong>Bold</strong>, <em>Italic</em>, <u>Underline</u>, 
                  Senarai, Penjajaran, Warna, dan Pautan.
                </small>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label for="edit-course-start-date">Tarikh Mula Permohonan *</label>
                  <input type="date" id="edit-course-start-date" name="start_date" class="form-input" required>
                </div>
                <div class="form-group">
                  <label for="edit-course-end-date">Tarikh Tutup Permohonan *</label>
                  <input type="date" id="edit-course-end-date" name="end_date" class="form-input" required>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label for="edit-course-start-time">Waktu Mula Permohonan *</label>
                  <input type="time" id="edit-course-start-time" name="start_time" class="form-input" required>
                </div>
                <div class="form-group">
                  <label for="edit-course-end-time">Waktu Tutup Penerimaan *</label>
                  <input type="time" id="edit-course-end-time" name="end_time" class="form-input" required>
                </div>
              </div>
            </div>

            <!-- Submit Button -->
            <div class="form-actions">
              <button type="submit" class="update-btn">Kemas Kini</button>
            </div>
          </form>
        </div>
      </div>

      <!-- Status Change Modal -->
      <div class="modal-overlay" id="status-course-modal">
        <div class="modal-content">
          <div class="modal-header">
            <h3>Tukar Status Kursus</h3>
            <button class="modal-close" id="status-course-modal-close">&times;</button>
          </div>
          
          <form class="status-form" id="status-course-form">
            <input type="hidden" id="status-course-id" name="course_id">
            
            <div class="form-group">
              <label for="course-status">Status Kursus</label>
              <select id="course-status" name="status" class="form-input" required>
                <option value="">Pilih status...</option>
                <option value="pending">Menunggu</option>
                <option value="in_progress">Sedang Berjalan</option>
                <option value="completed">Selesai</option>
              </select>
            </div>

            <!-- Submit Button -->
            <div class="form-actions">
              <button type="submit" class="status-btn">Tukar Status</button>
            </div>
          </form>
        </div>
      </div>
    </div>
</.admin_layout>



<script>
document.addEventListener('DOMContentLoaded', function() {
  // Sidebar dropdown and burger are handled globally in app.js

  // Modal functionality
  const newCourseBtn = document.getElementById('new-course-btn');
  const courseModal = document.getElementById('course-modal');
  const modalClose = document.getElementById('modal-close');
  const courseForm = document.querySelector('.program-form');

  // Open modal
  newCourseBtn.addEventListener('click', function() {
    courseModal.classList.add('show');
    // Initialize WYSIWYG editor after modal is shown
    setTimeout(() => {
      initializeWysiwygEditors();
    }, 100);
  });

  // Close modal
  modalClose.addEventListener('click', function() {
    courseModal.classList.remove('show');
  });

  // Close modal when clicking outside
  courseModal.addEventListener('click', function(e) {
    if (e.target === courseModal) {
      courseModal.classList.remove('show');
      resetCourseForm();
    }
  });

  // Close modal
  modalClose.addEventListener('click', function() {
    courseModal.classList.remove('show');
    resetCourseForm();
  });

  // Edit course modal functionality
  const editCourseModal = document.getElementById('edit-course-modal');
  const editCourseModalClose = document.getElementById('edit-course-modal-close');
  const editCourseForm = document.getElementById('edit-course-form');
  const editCourseImageUploadArea = document.getElementById('edit-course-image-upload-area');
  const editCourseImageInput = document.getElementById('edit-course-image-input');
  const editCoursePreviewImage = document.getElementById('edit-course-preview-image');
  const editCourseUploadIcon = document.getElementById('edit-course-upload-icon');

  // Status course modal functionality
  const statusCourseModal = document.getElementById('status-course-modal');
  const statusCourseModalClose = document.getElementById('status-course-modal-close');
  const statusCourseForm = document.getElementById('status-course-form');

  // Edit course modal close handlers
  editCourseModalClose.addEventListener('click', function() {
    editCourseModal.classList.remove('show');
    resetEditCourseForm();
  });

  editCourseModal.addEventListener('click', function(e) {
    if (e.target === editCourseModal) {
      editCourseModal.classList.remove('show');
      resetEditCourseForm();
    }
  });

  // Edit course image upload handlers
  editCourseImageUploadArea.addEventListener('click', function() {
    editCourseImageInput.click();
  });

  editCourseImageInput.addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      if (!file.type.startsWith('image/')) {
        alert('Sila pilih fail imej sahaja.');
        return;
      }

      if (file.size > 5 * 1024 * 1024) {
        alert('Saiz fail terlalu besar. Maksimum 5MB.');
        return;
      }

      const reader = new FileReader();
      reader.onload = function(e) {
        editCoursePreviewImage.src = e.target.result;
        editCoursePreviewImage.style.display = 'block';
        editCourseUploadIcon.style.display = 'none';
      };
      reader.readAsDataURL(file);
    }
  });

  // Edit course form submission
  editCourseForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Ensure WYSIWYG content is captured before submission
    const editDescriptionField = document.getElementById('edit-course-description');
    if (editDescriptionField && editDescriptionField.quillInstance) {
      editDescriptionField.value = editDescriptionField.quillInstance.root.innerHTML;
    }
    
    const formData = new FormData(editCourseForm);
    const courseData = Object.fromEntries(formData);
    const courseId = document.getElementById('edit-course-id').value;
    
    submitEditCourseToServer(courseData, courseId);
  });

  // Status course modal close handlers
  statusCourseModalClose.addEventListener('click', function() {
    statusCourseModal.classList.remove('show');
    statusCourseForm.reset();
  });

  statusCourseModal.addEventListener('click', function(e) {
    if (e.target === statusCourseModal) {
      statusCourseModal.classList.remove('show');
      statusCourseForm.reset();
    }
  });

  // Status course form submission
  statusCourseForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(statusCourseForm);
    const statusData = Object.fromEntries(formData);
    const courseId = document.getElementById('status-course-id').value;
    
    submitCourseStatusToServer(statusData, courseId);
  });

  // Reset course form function
  function resetCourseForm() {
    courseForm.reset();
    
    // Reset image preview
    const imagePreview = document.getElementById('image-preview');
    const uploadPlaceholder = document.getElementById('upload-placeholder');
    if (imagePreview) imagePreview.style.display = 'none';
    if (uploadPlaceholder) uploadPlaceholder.style.display = 'flex';
    
    // Clear all error messages
    document.querySelectorAll('.field-error').forEach(error => {
      error.style.display = 'none';
    });
    
    // Clean up WYSIWYG editors
    const descriptionField = document.getElementById('course-description');
    if (descriptionField && descriptionField.quillInstance) {
      try {
        descriptionField.quillInstance.destroy();
      } catch (e) {
        console.log('Error destroying Quill instance in resetCourseForm:', e);
      }
      descriptionField.quillInstance = null;
    }
    
    // Remove all Quill editor containers if they exist
    const editorContainers = document.querySelectorAll('#quill-editor-container-course');
    editorContainers.forEach(container => {
      container.remove();
    });
    
    // Also remove any orphaned Quill toolbars
    const orphanedToolbars = document.querySelectorAll('.ql-toolbar');
    orphanedToolbars.forEach(toolbar => {
      if (!toolbar.parentNode || !toolbar.parentNode.querySelector('.ql-editor')) {
        toolbar.remove();
      }
    });
    
    // Show the original textarea again
    if (descriptionField) {
      descriptionField.style.display = 'block';
    }
  }

  // Handle form submission
  courseForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Ensure WYSIWYG content is captured before submission
    const descriptionField = document.getElementById('course-description');
    if (descriptionField && descriptionField.quillInstance) {
      // Get the HTML content from Quill editor
      const htmlContent = descriptionField.quillInstance.root.innerHTML;
      // Set it as the value of the textarea
      descriptionField.value = htmlContent;
      console.log('WYSIWYG content captured for course:', htmlContent);
    }
    
    // Validate form
    if (!validateCourseForm()) {
      return;
    }
    
    // Get form data and convert to base64
    const formData = new FormData(courseForm);
    const imageFile = formData.get('course_image');
    
    if (imageFile && imageFile.size > 0) {
      const reader = new FileReader();
      reader.onload = function(e) {
        const imageData = e.target.result;
        submitCourseToServer(formData, imageData);
      };
      reader.readAsDataURL(imageFile);
    } else {
      submitCourseToServer(formData, null);
    }
  });



  // Image upload functionality for create form
  const imageUploadArea = document.getElementById('image-upload-area');
  const courseImageInput = document.getElementById('course-image');
  const imagePreview = document.getElementById('image-preview');
  const uploadPlaceholder = document.getElementById('upload-placeholder');

  imageUploadArea.addEventListener('click', function() {
    courseImageInput.click();
  });

  courseImageInput.addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(e) {
        imagePreview.src = e.target.result;
        imagePreview.style.display = 'block';
        uploadPlaceholder.style.display = 'none';
      };
      reader.readAsDataURL(file);
    }
  });



  // Validation functions
  function validateCourseForm() {
    let isValid = true;
    
    // Reset all error messages
    document.querySelectorAll('.field-error').forEach(error => {
      error.style.display = 'none';
    });
    
    const imageFile = document.getElementById('course-image').files[0];
    const name = document.getElementById('course-name').value.trim();
    const description = document.getElementById('course-description').value.trim();
    const startDate = document.getElementById('course-start-date').value;
    const endDate = document.getElementById('course-end-date').value;
    const startTime = document.getElementById('course-start-time').value;
    const endTime = document.getElementById('course-end-time').value;
    
    if (!imageFile) {
      document.getElementById('image-error').textContent = 'Sila pilih gambar kursus';
      document.getElementById('image-error').style.display = 'block';
      isValid = false;
    }
    
    if (!name) {
      document.getElementById('name-error').textContent = 'Sila masukkan nama kursus';
      document.getElementById('name-error').style.display = 'block';
      isValid = false;
    }
    
    if (!description) {
      document.getElementById('description-error').textContent = 'Sila masukkan diskripsi kursus';
      document.getElementById('description-error').style.display = 'block';
      isValid = false;
    }
    
    if (!startDate) {
      document.getElementById('start-date-error').textContent = 'Sila pilih tarikh mula';
      document.getElementById('start-date-error').style.display = 'block';
      isValid = false;
    }
    
    if (!endDate) {
      document.getElementById('end-date-error').textContent = 'Sila pilih tarikh tamat';
      document.getElementById('end-date-error').style.display = 'block';
      isValid = false;
    }
    
    if (!startTime) {
      document.getElementById('start-time-error').textContent = 'Sila pilih waktu mula';
      document.getElementById('start-time-error').style.display = 'block';
      isValid = false;
    }
    
    if (!endTime) {
      document.getElementById('end-time-error').textContent = 'Sila pilih waktu tamat';
      document.getElementById('end-time-error').style.display = 'block';
      isValid = false;
    }
    
    return isValid;
  }

  function validateEditCourseForm() {
    let isValid = true;
    
    // Reset all error messages
    document.querySelectorAll('.field-error').forEach(error => {
      error.style.display = 'none';
    });
    
    const name = document.getElementById('edit-course-name').value.trim();
    const description = document.getElementById('edit-course-description').value.trim();
    const startDate = document.getElementById('edit-course-start-date').value;
    const endDate = document.getElementById('edit-course-end-date').value;
    const startTime = document.getElementById('edit-course-start-time').value;
    const endTime = document.getElementById('edit-course-end-time').value;
    
    if (!name) {
      document.getElementById('edit-name-error').textContent = 'Sila masukkan nama kursus';
      document.getElementById('edit-name-error').style.display = 'block';
      isValid = false;
    }
    
    if (!description) {
      document.getElementById('edit-description-error').textContent = 'Sila masukkan diskripsi kursus';
      document.getElementById('edit-description-error').style.display = 'block';
      isValid = false;
    }
    
    if (!startDate) {
      document.getElementById('edit-start-date-error').textContent = 'Sila pilih tarikh mula';
      document.getElementById('edit-start-date-error').style.display = 'block';
      isValid = false;
    }
    
    if (!endDate) {
      document.getElementById('edit-end-date-error').textContent = 'Sila pilih tarikh tamat';
      document.getElementById('edit-end-date-error').style.display = 'block';
      isValid = false;
    }
    
    if (!startTime) {
      document.getElementById('edit-start-time-error').textContent = 'Sila pilih waktu mula';
      document.getElementById('edit-start-time-error').style.display = 'block';
      isValid = false;
    }
    
    if (!endTime) {
      document.getElementById('edit-end-time-error').textContent = 'Sila pilih waktu tamat';
      document.getElementById('edit-end-time-error').style.display = 'block';
      isValid = false;
    }
    
    return isValid;
  }

  // Server submission functions
  function submitCourseToServer(formData, imageData) {
    const courseData = {
      course: {
        name: formData.get('course_name'),
        description: formData.get('course_description'),
        image_data: imageData,
        start_date: formData.get('course_start_date'),
        end_date: formData.get('course_end_date'),
        start_time: formData.get('course_start_time'),
        end_time: formData.get('course_end_time')
      }
    };

    fetch('/admin/courses', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify(courseData)
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('Kursus berjaya dicipta!');
        courseModal.classList.remove('show');
        resetCourseForm();
        
        // Add the new course to the grid dynamically
        addCourseToGrid(data.course);
      } else {
        alert('Ralat: ' + Object.values(data.errors).flat().join(', '));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Ralat semasa mencipta kursus');
    });
  }



  // Initialize WYSIWYG editors
  function initializeWysiwygEditors() {
    // Initialize main form WYSIWYG editor
    const descriptionField = document.getElementById('course-description');
    if (descriptionField) {
      // Clean up any existing editor first
      if (descriptionField.quillInstance) {
        try {
          descriptionField.quillInstance.destroy();
        } catch (e) {
          console.log('Error destroying existing Quill instance:', e);
        }
        descriptionField.quillInstance = null;
      }
      
      // Remove any existing editor containers (check for multiple)
      const existingContainers = document.querySelectorAll('#quill-editor-container-course');
      existingContainers.forEach(container => {
        container.remove();
      });
      
      // Also remove any Quill toolbars that might be left behind
      const existingToolbars = document.querySelectorAll('.ql-toolbar');
      existingToolbars.forEach(toolbar => {
        if (toolbar.parentNode && toolbar.parentNode.id === 'quill-editor-container-course') {
          toolbar.remove();
        }
      });
      
      // Show the original textarea first
      descriptionField.style.display = 'block';
      
      // Create a container for the Quill editor
      const editorContainer = document.createElement('div');
      editorContainer.id = 'quill-editor-container-course';
      editorContainer.style.height = '200px';
      editorContainer.style.marginBottom = '10px';
      
      // Insert the container before the textarea
      descriptionField.parentNode.insertBefore(editorContainer, descriptionField);
      
      // Hide the original textarea
      descriptionField.style.display = 'none';
      
      // Initialize Quill editor
      const quill = new Quill(editorContainer, {
        theme: 'snow',
        modules: {
          toolbar: [
            ['bold', 'italic', 'underline'],
            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
            [{ 'align': [] }],
            [{ 'color': [] }, { 'background': [] }],
            ['link'],
            ['clean']
          ]
        },
        placeholder: 'Masukkan diskripsi kursus dengan format yang diingini...'
      });
      
      // Store the Quill instance on the textarea for easy access
      descriptionField.quillInstance = quill;
      
      // Sync content from Quill to textarea on change
      quill.on('text-change', function() {
        descriptionField.value = quill.root.innerHTML;
      });
      
      console.log('WYSIWYG editor initialized for course description');
    }
  }

  // Set WYSIWYG content
  function setWysiwygContent(fieldId, content) {
    const field = document.getElementById(fieldId);
    if (field && field.quillInstance) {
      // Clear the editor first
      field.quillInstance.setText('');
      // Then set the HTML content
      field.quillInstance.root.innerHTML = content || '';
      console.log('Setting WYSIWYG content for', fieldId, ':', content);
    } else {
      console.error('WYSIWYG editor not found or not initialized for', fieldId);
    }
  }

  // Add new course to grid dynamically
  function addCourseToGrid(course) {
    const courseGrid = document.querySelector('.program-grid'); // Note: using same class as program grid
    const placeholderCards = courseGrid.querySelectorAll('.program-card.placeholder');
    
    if (placeholderCards.length > 0) {
      // Remove the first placeholder card
      const firstPlaceholder = placeholderCards[0];
      firstPlaceholder.remove();
      
      // Create new course card
      const newCourseCard = document.createElement('div');
      newCourseCard.className = 'program-card';
      newCourseCard.setAttribute('data-course-id', course.id);
      
      // Create the card content
      const cardContent = document.createElement('div');
      cardContent.className = 'program-card-content';
      cardContent.onclick = function() {
        window.location.href = '/kursus_pemohon';
      };
      
      // Create image section
      const imageSection = document.createElement('div');
      imageSection.className = 'program-image';
      const image = document.createElement('img');
      image.src = course.image_data;
      image.alt = course.name;
      image.style.cssText = 'width: 100%; height: 120px; object-fit: cover; border-radius: 8px 8px 0 0;';
      imageSection.appendChild(image);
      
      // Create info section
      const infoSection = document.createElement('div');
      infoSection.className = 'program-info';
      
      const title = document.createElement('h3');
      title.className = 'program-title';
      title.textContent = course.name;
      
      const description = document.createElement('p');
      description.className = 'program-description';
      // Strip HTML tags for display
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = course.description;
      const textContent = tempDiv.textContent || tempDiv.innerText || '';
      description.textContent = textContent.length > 100 ? textContent.substring(0, 100) + '...' : textContent;
      
      const dates = document.createElement('div');
      dates.className = 'program-dates';
      dates.innerHTML = `<span>${course.start_date} - ${course.end_date}</span>`;
      
      infoSection.appendChild(title);
      infoSection.appendChild(description);
      infoSection.appendChild(dates);
      
      cardContent.appendChild(imageSection);
      cardContent.appendChild(infoSection);
      newCourseCard.appendChild(cardContent);
      
      // Create action icons
      const actionsDiv = document.createElement('div');
      actionsDiv.className = 'program-actions';
      
      // Edit button
      const editBtn = document.createElement('button');
      editBtn.className = 'action-icon edit-btn';
      editBtn.title = 'Edit Course';
      editBtn.setAttribute('data-course-id', course.id);
      editBtn.onclick = function(e) {
        e.stopPropagation();
        editCourse(this.dataset.courseId);
      };
      editBtn.innerHTML = `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
        <path d="m18.5 2.5 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
      </svg>`;
      
      // Status button
      const statusBtn = document.createElement('button');
      statusBtn.className = 'action-icon status-btn';
      statusBtn.title = 'Status Course';
      statusBtn.setAttribute('data-course-id', course.id);
      statusBtn.onclick = function(e) {
        e.stopPropagation();
        changeCourseStatus(this.dataset.courseId);
      };
      statusBtn.innerHTML = `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="12" cy="12" r="3"></circle>
        <path d="M12 1v6m0 6v6"></path>
        <path d="M19.78 4.22l-4.24 4.24m-8.48 8.48l-4.24 4.24"></path>
      </svg>`;
      
      // Delete button
      const deleteBtn = document.createElement('button');
      deleteBtn.className = 'action-icon delete-btn';
      deleteBtn.title = 'Delete Course';
      deleteBtn.setAttribute('data-course-id', course.id);
      deleteBtn.onclick = function(e) {
        e.stopPropagation();
        deleteCourse(this.dataset.courseId);
      };
      deleteBtn.innerHTML = `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="3,6 5,6 21,6"></polyline>
        <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"></path>
      </svg>`;
      
      actionsDiv.appendChild(editBtn);
      actionsDiv.appendChild(statusBtn);
      actionsDiv.appendChild(deleteBtn);
      newCourseCard.appendChild(actionsDiv);
      
      // Insert the new card at the beginning of the grid
      courseGrid.insertBefore(newCourseCard, courseGrid.firstChild);
      
      console.log('New course added to grid:', course.name);
    } else {
      console.log('No placeholder cards available');
    }
  }

  // Action button functions
  function editCourse(courseId) {
    console.log('Edit course:', courseId);
    // TODO: Implement edit functionality
    alert('Edit course functionality will be implemented');
  }

  function changeCourseStatus(courseId) {
    console.log('Change course status:', courseId);
    // TODO: Implement status change functionality
    alert('Change course status functionality will be implemented');
  }

  function deleteCourse(courseId) {
    console.log('Delete course:', courseId);
    if (confirm('Are you sure you want to delete this course?')) {
      // TODO: Implement delete functionality
      alert('Delete course functionality will be implemented');
    }
  }
});

// Make functions globally accessible
window.editCourse = function(courseId) {
  console.log('Global editCourse called with:', courseId);
  fetchCourseData(courseId);
};

window.changeCourseStatus = function(courseId) {
  console.log('Global changeCourseStatus called with:', courseId);
  showCourseStatusModal(courseId);
};

window.deleteCourse = function(courseId) {
  console.log('Global deleteCourse called with:', courseId);
  if (confirm('Adakah anda pasti mahu memadamkan kursus ini?')) {
    deleteCourseFromServer(courseId);
  }
};

// Fetch course data for editing
function fetchCourseData(courseId) {
  fetch(`/admin/courses/${courseId}`)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        populateEditCourseForm(data.course);
        showEditCourseModal();
      } else {
        alert('Ralat: Tidak dapat memuatkan data kursus');
      }
    })
    .catch(error => {
      console.error('Error fetching course:', error);
      if (error.name === 'AbortError') {
        console.log('Request was aborted - this is normal');
        return;
      }
      alert('Ralat: Tidak dapat memuatkan data kursus');
    });
}

// Populate edit course form with course data
function populateEditCourseForm(course) {
  document.getElementById('edit-course-name').value = course.name;
  document.getElementById('edit-course-description').value = course.description;
  document.getElementById('edit-course-start-date').value = course.start_date;
  document.getElementById('edit-course-end-date').value = course.end_date;
  document.getElementById('edit-course-start-time').value = course.start_time;
  document.getElementById('edit-course-end-time').value = course.end_time;
  document.getElementById('edit-course-id').value = course.id;
  
  // Set image preview if exists
  if (course.image_data) {
    document.getElementById('edit-course-preview-image').src = course.image_data;
    document.getElementById('edit-course-preview-image').style.display = 'block';
    document.getElementById('edit-course-upload-icon').style.display = 'none';
  }
  
  // Initialize WYSIWYG editor for edit form
  setTimeout(() => {
    // Clean up any existing editor first
    cleanupEditCourseForm();
    initializeEditCourseWysiwygEditor();
    if (course.description) {
      setWysiwygContent('edit-course-description', course.description);
    }
  }, 100);
}

// Show edit course modal
function showEditCourseModal() {
  document.getElementById('edit-course-modal').classList.add('show');
}

// Show course status change modal
function showCourseStatusModal(courseId) {
  const statusModal = document.getElementById('status-course-modal');
  document.getElementById('status-course-id').value = courseId;
  statusModal.classList.add('show');
}

// Delete course from server
function deleteCourseFromServer(courseId) {
  fetch(`/admin/courses/${courseId}`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      alert('Kursus berjaya dipadamkan!');
      // Remove the card from the grid
      const courseCard = document.querySelector(`[data-course-id="${courseId}"]`);
      if (courseCard) {
        courseCard.remove();
      }
    } else {
      alert('Ralat: ' + (data.error || 'Tidak dapat memadamkan kursus'));
    }
  })
  .catch(error => {
    console.error('Error deleting course:', error);
    if (error.name === 'AbortError') {
      console.log('Delete request was aborted - this is normal');
      return;
    }
    alert('Ralat: Tidak dapat memadamkan kursus');
  });
}

// Initialize WYSIWYG editor for edit course form
function initializeEditCourseWysiwygEditor() {
  const descriptionField = document.getElementById('edit-course-description');
  if (descriptionField) {
    // Show the original textarea first
    descriptionField.style.display = 'block';
    
    // Create a container for the Quill editor
    const editorContainer = document.createElement('div');
    editorContainer.id = 'edit-course-quill-editor-container';
    editorContainer.style.height = '200px';
    editorContainer.style.marginBottom = '10px';
    
    // Insert the container before the textarea
    descriptionField.parentNode.insertBefore(editorContainer, descriptionField);
    
    // Hide the original textarea
    descriptionField.style.display = 'none';
    
    // Initialize Quill editor
    const quill = new Quill(editorContainer, {
      theme: 'snow',
      modules: {
        toolbar: [
          ['bold', 'italic', 'underline'],
          [{ 'list': 'ordered'}, { 'list': 'bullet' }],
          [{ 'align': [] }],
          [{ 'color': [] }, { 'background': [] }],
          ['link'],
          ['clean']
        ]
      },
      placeholder: 'Masukkan diskripsi kursus dengan format yang diingini...'
    });
    
    // Store the Quill instance on the textarea for easy access
    descriptionField.quillInstance = quill;
    
    // Sync content from Quill to textarea on change
    quill.on('text-change', function() {
      descriptionField.value = quill.root.innerHTML;
    });
    
    console.log('WYSIWYG editor initialized for edit course description');
  }
}

// Clean up edit course form WYSIWYG
function cleanupEditCourseForm() {
  const descriptionField = document.getElementById('edit-course-description');
  if (descriptionField && descriptionField.quillInstance) {
    try {
      descriptionField.quillInstance.destroy();
    } catch (e) {
      console.log('Error destroying edit course Quill instance:', e);
    }
    descriptionField.quillInstance = null;
  }
  
  // Remove all edit course Quill editor containers if they exist
  const editorContainers = document.querySelectorAll('#edit-course-quill-editor-container');
  editorContainers.forEach(container => {
    container.remove();
  });
  
  // Also remove any orphaned Quill toolbars
  const orphanedToolbars = document.querySelectorAll('.ql-toolbar');
  orphanedToolbars.forEach(toolbar => {
    if (!toolbar.parentNode || !toolbar.parentNode.querySelector('.ql-editor')) {
      toolbar.remove();
    }
  });
  
  // Remove any remaining Quill containers that might be left
  const allQuillContainers = document.querySelectorAll('.ql-container');
  allQuillContainers.forEach(container => {
    if (container.parentNode && container.parentNode.id === 'edit-course-quill-editor-container') {
      container.remove();
    }
  });
  
  // Show the original textarea again
  if (descriptionField) {
    descriptionField.style.display = 'block';
  }
  
  console.log('Edit course form WYSIWYG cleanup completed');
}

// Reset edit course form
function resetEditCourseForm() {
  editCourseForm.reset();
  
  // Reset image preview
  editCoursePreviewImage.style.display = 'none';
  editCourseUploadIcon.style.display = 'block';
  
  // Clean up WYSIWYG editor
  cleanupEditCourseForm();
  
  console.log('Edit course form reset completed');
}

// Submit edit course to server
function submitEditCourseToServer(courseData, courseId) {
  // Ensure WYSIWYG content is captured before submission
  const editDescriptionField = document.getElementById('edit-course-description');
  if (editDescriptionField && editDescriptionField.quillInstance) {
    editDescriptionField.value = editDescriptionField.quillInstance.root.innerHTML;
  }
  
  const serverData = {
    course: {
      name: courseData.course_name,
      description: courseData.course_description,
      start_date: courseData.start_date,
      end_date: courseData.end_date,
      start_time: courseData.start_time,
      end_time: courseData.end_time
    }
  };

  fetch(`/admin/courses/${courseId}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
    },
    body: JSON.stringify(serverData)
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      alert('Kursus berjaya dikemas kini!');
      document.getElementById('edit-course-modal').classList.remove('show');
      // Clean up edit form WYSIWYG
      cleanupEditCourseForm();
      // Optionally refresh the page or update the card
      location.reload();
    } else {
      alert('Ralat: ' + (data.error || 'Tidak dapat mengemas kini kursus'));
    }
  })
  .catch(error => {
    console.error('Error updating course:', error);
    if (error.name === 'AbortError') {
      console.log('Edit request was aborted - this is normal');
      return;
    }
    alert('Ralat: Tidak dapat mengemas kini kursus');
  });
}

// Submit course status to server
function submitCourseStatusToServer(statusData, courseId) {
  const serverData = {
    course: {
      status: statusData.status
    }
  };

  fetch(`/admin/courses/${courseId}/status`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
    },
    body: JSON.stringify(serverData)
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      alert('Status kursus berjaya ditukar!');
      document.getElementById('status-course-modal').classList.remove('show');
      document.getElementById('status-course-form').reset();
      // Optionally refresh the page or update the card
      location.reload();
    } else {
      alert('Ralat: ' + (data.error || 'Tidak dapat menukar status kursus'));
    }
  })
  .catch(error => {
    console.error('Error updating course status:', error);
    if (error.name === 'AbortError') {
      console.log('Status request was aborted - this is normal');
      return;
    }
    alert('Ralat: Tidak dapat menukar status kursus');
  });
}

// Application review functions
function reviewApplication(applicationId, status) {
  document.getElementById('review-application-id').value = applicationId;
  document.getElementById('review-status').value = status;
  document.getElementById('review-modal').classList.add('show');
}

function viewApplication(applicationId) {
  // For now, just show an alert. You can implement a detailed view modal later
  alert('Lihat permohonan ID: ' + applicationId);
}

function closeReviewModal() {
  document.getElementById('review-modal').classList.remove('show');
  document.getElementById('review-notes').value = '';
}
</script>
</body>
</html> 